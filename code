import cv2
import numpy as np

# 讀取圖片
image = cv2.imread(r'C:\Users\b5403175\Desktop\opencv\middle-of-the-road-1332589.jpg')
# 灰階處理
def cvtColor(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    return gray

gray = cvtColor(image)

# Sobel 邊緣檢測 (增強效果)
def sobel_edge_detection(image, x):
    sobel_x = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=x)  # 增大內核大小，提高邊緣檢測
    sobel_y = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=x)
    sobel_mag = cv2.magnitude(sobel_x, sobel_y)
    sobel_mag = np.uint8(np.absolute(sobel_mag))  # 絕對值
    return sobel_mag

sobel_image = sobel_edge_detection(gray, 5)

# LBP 邊緣檢測
def lbp(image):
    lbp_image = np.zeros_like(image)
    for i in range(1, image.shape[0] - 1):
        for j in range(1, image.shape[1] - 1):
            center = image[i, j]
            binary_string = ''
            binary_string += '1' if image[i-1, j-1] > center else '0'
            binary_string += '1' if image[i-1, j] > center else '0'
            binary_string += '1' if image[i-1, j+1] > center else '0'
            binary_string += '1' if image[i, j+1] > center else '0'
            binary_string += '1' if image[i+1, j+1] > center else '0'
            binary_string += '1' if image[i+1, j] > center else '0'
            binary_string += '1' if image[i+1, j-1] > center else '0'
            binary_string += '1' if image[i, j-1] > center else '0'
            lbp_image[i, j] = int(binary_string, 2)
    return lbp_image

lbp_image = lbp(gray)

# 使用HSV空間來進行顏色範圍過濾
def HSV(image, lbp_image, sobel_image):
    hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

    # 黑色範圍（在HSV中，黑色通常有較低的亮度值）
    lower_black = np.array([0, 0, 0])  # HSV空間中的黑色下限
    upper_black = np.array([180, 255, 80])  # 增大上限以捕捉灰色

    # 黑色範圍過濾
    mask_black = cv2.inRange(hsv_image, lower_black, upper_black)

    # 植被顏色篩選：綠色區域
    lower_green = np.array([35, 50, 50])  # 綠色的低範圍
    upper_green = np.array([85, 255, 255])  # 綠色的高範圍
    mask_green = cv2.inRange(hsv_image, lower_green, upper_green)

    # 枯萎/乾燥植被顏色篩選：黃色至棕色區域
    lower_dry_vegetation = np.array([15, 50, 50])  # 黃色的低範圍
    upper_dry_vegetation = np.array([35, 255, 255])  # 黃色的高範圍
    mask_dry_vegetation = cv2.inRange(hsv_image, lower_dry_vegetation, upper_dry_vegetation)

    # 天空顏色篩選：藍色區域
    lower_blue = np.array([100, 50, 50])  # 藍色的低範圍
    upper_blue = np.array([140, 255, 255])  # 藍色的高範圍
    mask_blue = cv2.inRange(hsv_image, lower_blue, upper_blue)

    # 排除植被、枯萎植被與天空：將其設為0
    mask_exclude = cv2.bitwise_or(mask_green, mask_blue)
    mask_exclude = cv2.bitwise_or(mask_exclude, mask_dry_vegetation)
    mask_filtered = cv2.bitwise_and(mask_black, ~mask_exclude)

    # 結合 LBP 邊緣檢測和 Sobel 邊緣檢測
    combined = cv2.bitwise_or(lbp_image, sobel_image)  # 結合 LBP 和 Sobel 邊緣檢測

    # 結合邊緣檢測結果和顏色範圍過濾
    combined_filtered = cv2.bitwise_and(combined, combined, mask=mask_filtered)

    # 二值化處理
    _, binary = cv2.threshold(combined_filtered, 50, 255, cv2.THRESH_BINARY)
    return binary
binary = HSV(image, lbp_image, sobel_image)

# 形態學操作（閉運算填補洞，開運算去除小噪點）
def morphology(binary):
    kernel = np.ones((9, 9), np.uint8)  # 使用較大的內核
    binary = cv2.morphologyEx(binary, cv2.MORPH_CLOSE, kernel)  # 填補小洞
    binary = cv2.morphologyEx(binary, cv2.MORPH_OPEN, kernel)  # 去除噪點

    # 直方圖分析 (此處可根據需求進行進一步的閾值處理來強化特徵)
    hist = cv2.calcHist([binary], [0], None, [256], [0, 256])

    # 連通區域檢測：填補邊界
    num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(binary)

    # 這裡可以選擇只保留大的連通區域，從而去掉一些小區域噪點
    min_area = 1000  # 設置最小區域大小
    for i in range(1, num_labels):
        if stats[i, cv2.CC_STAT_AREA] < min_area:
           binary[labels == i] = 0  # 去除小區域

    # 使用形態學操作進一步填補小洞
    binary = cv2.morphologyEx(binary, cv2.MORPH_CLOSE, kernel)
    return binary

binary=morphology(binary)

# 距離測量 (使用簡單的中心線距離測量)
height, width = binary.shape
center_x = width // 2
distances = np.zeros_like(binary, dtype=np.float32)  # 使用 float32 來避免溢位
for y in range(height):
    for x in range(width):
        distances[y, x] = abs(x - center_x) if binary[y, x] == 255 else 0

# 將距離矩陣正規化到 0-255 範圍
distances_normalized = cv2.normalize(distances, None, 0, 255, cv2.NORM_MINMAX)
distances_normalized = distances_normalized.astype(np.uint8)

# 手動標籤化 (將道路區域標示為255，其它為0)
def labeled(binary):
    labeled_img = np.zeros_like(binary)
    labeled_img[binary == 255] = 255

    # 將馬路區域著色為綠色
    road_colored = image.copy()
    road_colored[labeled_img == 255] = [0, 255, 0]  # 綠色
    return road_colored
road_colored=labeled(binary)

# 顯示結果圖片
cv2.imshow("Original", image)
cv2.imshow("Gray", gray)
cv2.imshow("Sobel Edges", sobel_image)
cv2.imshow("LBP", lbp_image)
cv2.imshow("Binary", binary)
cv2.imshow("Distance Transform", distances_normalized)
cv2.imshow("Road Colored Green", road_colored)

cv2.waitKey(0)
cv2.destroyAllWindows()

import cv2
import numpy as np
import matplotlib.pyplot as plt
from scipy.spatial.distance import euclidean, cityblock, chi2

# LBP 函數：計算每個像素的 LBP 值
def lbp(image):
    # 轉換為灰階圖像
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # 獲得圖像的大小
    height, width = gray.shape

    # 創建一個和原圖同大小的空白圖像來存儲 LBP 值
    lbp_image = np.zeros_like(gray, dtype=np.uint8)
    
    # 遍歷圖像中的每個像素，忽略邊界像素
    for i in range(1, height - 1):
        for j in range(1, width - 1):
            # 獲取 3x3 鄰域
            center = gray[i, j]
            binary_values = []
            
            # 遍歷周圍的 8 個像素
            for k in range(3):
                for l in range(3):
                    if k == 1 and l == 1:  # 忽略中心像素
                        continue
                    neighbor = gray[i + k - 1, j + l - 1]
                    binary_values.append(1 if neighbor >= center else 0)
            
            # 將二進制值轉換為十進制
            lbp_value = 0
            for idx, value in enumerate(binary_values):
                lbp_value |= value << (7 - idx)  # 左移並組合成二進制數字

            # 儲存 LBP 值
            lbp_image[i, j] = lbp_value
    
    return lbp_image

# Sobel 邊緣檢測函數
def sobel_edge_detection(image):
    # 轉換為灰階圖像
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # 使用 Sobel 濾波器計算 X 和 Y 方向的梯度
    sobel_x = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)
    sobel_y = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)
    
    # 計算梯度幅度（邊緣強度）
    magnitude = cv2.magnitude(sobel_x, sobel_y)
    
    # 將梯度幅度值轉換為可顯示的範圍（0-255）
    magnitude = np.uint8(np.absolute(magnitude))
    
    return magnitude

# 計算 LBP 直方圖
def compute_lbp_histogram(lbp_image, bins=256):
    # 計算 LBP 直方圖
    hist, _ = np.histogram(lbp_image.ravel(), bins=bins, range=(0, bins))
    
    # 標準化直方圖（將直方圖轉為機率分佈，總和為1）
    hist = hist.astype('float32')
    hist /= hist.sum()
    
    return hist

# 計算直方圖距離
def calculate_histogram_distance(hist1, hist2, metric='euclidean'):
    if metric == 'euclidean':
        return np.linalg.norm(hist1 - hist2)
    elif metric == 'chi2':
        return chi2(hist1, hist2)  # scipy的卡方距離
    elif metric == 'manhattan':
        return cityblock(hist1, hist2)  # 曼哈頓距離
    else:
        raise ValueError(f"Unsupported metric: {metric}")

# 讀取圖像
img1 = cv2.imread('image1.jpg')  # 替換為你的圖像1
img2 = cv2.imread('image2.jpg')  # 替換為你的圖像2

# 1. Sobel 邊緣檢測
sobel_edges1 = sobel_edge_detection(img1)
sobel_edges2 = sobel_edge_detection(img2)

# 2. 計算 Sobel 邊緣圖像的 LBP 特徵
lbp_edges1 = lbp(sobel_edges1)
lbp_edges2 = lbp(sobel_edges2)

# 3. 計算 LBP 直方圖
lbp_hist1 = compute_lbp_histogram(lbp_edges1)
lbp_hist2 = compute_lbp_histogram(lbp_edges2)

# 4. 計算 LBP 直方圖距離
distance_euclidean = calculate_histogram_distance(lbp_hist1, lbp_hist2, metric='euclidean')
distance_chi2 = calculate_histogram_distance(lbp_hist1, lbp_hist2, metric='chi2')
distance_manhattan = calculate_histogram_distance(lbp_hist1, lbp_hist2, metric='manhattan')

print(f"Euclidean Distance: {distance_euclidean}")
print(f"Chi-square Distance: {distance_chi2}")
print(f"Manhattan Distance: {distance_manhattan}")

# 顯示結果
cv2.imshow('Image 1 - Sobel Edge', sobel_edges1)
cv2.imshow('Image 2 - Sobel Edge', sobel_edges2)
cv2.imshow('Image 1 - LBP', lbp_edges1)
cv2.imshow('Image 2 - LBP', lbp_edges2)

plt.figure()
plt.title("LBP Histogram for Image 1")
plt.plot(lbp_hist1)
plt.xlim([0, 256])
plt.xlabel("LBP Value")
plt.ylabel("Frequency")

plt.figure()
plt.title("LBP Histogram for Image 2")
plt.plot(lbp_hist2)
plt.xlim([0, 256])
plt.xlabel("LBP Value")
plt.ylabel("Frequency")

plt.show()

cv2.waitKey(0)
cv2.destroyAllWindows()
